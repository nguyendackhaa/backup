#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script ƒë·ªÉ x·ª≠ l√Ω l·∫°i d·ªØ li·ªáu hi·ªán c√≥ v·ªõi ƒëa lu·ªìng:
1. S·ª≠a t√™n ti·∫øng Vi·ªát b·∫±ng Gemini + th√™m h·∫≠u t·ªë FOTEK 
2. Lo·∫°i b·ªè markdown formatting trong HTML specs
3. Chia th√†nh 22 file Excel ri√™ng theo category
4. Ch·ªâ d·ªãch l·∫°i ·∫£nh th√¥ng s·ªë k·ªπ thu·∫≠t, kh√¥ng t·∫£i ·∫£nh m·ªõi
5. X·ª≠ l√Ω song song nhi·ªÅu s·∫£n ph·∫©m ƒë·ªÉ tƒÉng t·ªëc ƒë·ªô

S·ª≠ d·ª•ng:
    python reprocess_data.py --workers 10    # S·ª≠ d·ª•ng 10 workers
    python reprocess_data.py --workers 5     # S·ª≠ d·ª•ng 5 workers (m·∫∑c ƒë·ªãnh)
"""

import sys
import logging
import argparse
import time
from pathlib import Path

# Th√™m th∆∞ m·ª•c src v√†o Python path
sys.path.append(str(Path(__file__).parent / "src"))

from scraper import FotekScraper

def setup_logging():
    """Thi·∫øt l·∫≠p logging"""
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(message)s',
        handlers=[
            logging.StreamHandler(),
            logging.FileHandler('reprocess_data.log', encoding='utf-8')
        ]
    )

def parse_arguments():
    """Parse command line arguments"""
    parser = argparse.ArgumentParser(
        description='X·ª≠ l√Ω l·∫°i d·ªØ li·ªáu Fotek v·ªõi ƒëa lu·ªìng ƒë·ªÉ tƒÉng t·ªëc ƒë·ªô',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
V√≠ d·ª• s·ª≠ d·ª•ng:
    python reprocess_data.py --workers 10    # S·ª≠ d·ª•ng 10 workers (nhanh nh·∫•t)
    python reprocess_data.py --workers 5     # S·ª≠ d·ª•ng 5 workers (c√¢n b·∫±ng)
    python reprocess_data.py --workers 2     # S·ª≠ d·ª•ng 2 workers (·ªïn ƒë·ªãnh)
    
L∆∞u √Ω:
    - Workers cao h∆°n = nhanh h∆°n nh∆∞ng c√≥ th·ªÉ b·ªã gi·ªõi h·∫°n rate limit c·ªßa Gemini
    - Khuy·∫øn ngh·ªã: 5-10 workers cho t·ªëc ƒë·ªô t·ªëi ∆∞u
    - N·∫øu g·∫∑p l·ªói rate limit, h√£y gi·∫£m s·ªë workers
        """
    )
    
    parser.add_argument(
        '--workers', '-w',
        type=int,
        default=5,
        help='S·ªë l∆∞·ª£ng worker threads (m·∫∑c ƒë·ªãnh: 5)'
    )
    
    parser.add_argument(
        '--estimate-time',
        action='store_true',
        help='Ch·ªâ ∆∞·ªõc t√≠nh th·ªùi gian, kh√¥ng th·ª±c hi·ªán x·ª≠ l√Ω'
    )
    
    return parser.parse_args()

def estimate_processing_time(total_products: int, max_workers: int):
    """∆Ø·ªõc t√≠nh th·ªùi gian x·ª≠ l√Ω"""
    # M·ªói s·∫£n ph·∫©m ∆∞·ªõc t√≠nh ~6 gi√¢y (Gemini API calls)
    time_per_product = 6  # seconds
    total_sequential_time = total_products * time_per_product
    
    # V·ªõi ƒëa lu·ªìng, th·ªùi gian gi·∫£m theo s·ªë workers (v·ªõi m·ªôt √≠t overhead)
    efficiency = 0.8  # 80% hi·ªáu qu·∫£ do overhead v√† rate limits
    parallel_time = (total_sequential_time / max_workers) * (1 / efficiency)
    
    return total_sequential_time, parallel_time

def format_time(seconds):
    """Format th·ªùi gian th√†nh chu·ªói d·ªÖ ƒë·ªçc"""
    if seconds < 60:
        return f"{seconds:.0f} gi√¢y"
    elif seconds < 3600:
        minutes = seconds / 60
        return f"{minutes:.1f} ph√∫t"
    else:
        hours = seconds / 3600
        return f"{hours:.1f} gi·ªù"

def main():
    """H√†m ch√≠nh"""
    args = parse_arguments()
    setup_logging()
    logger = logging.getLogger(__name__)
    
    logger.info("üîÑ Kh·ªüi t·∫°o script x·ª≠ l√Ω l·∫°i d·ªØ li·ªáu hi·ªán c√≥...")
    logger.info(f"‚öôÔ∏è C·∫•u h√¨nh: {args.workers} workers")
    
    try:
        # Kh·ªüi t·∫°o scraper ƒë·ªÉ ƒë·ªçc th√¥ng tin
        scraper = FotekScraper(max_workers=1)
        
        # ƒê·ªçc s·ªë l∆∞·ª£ng s·∫£n ph·∫©m ƒë·ªÉ ∆∞·ªõc t√≠nh th·ªùi gian
        excel_files = list(scraper.excel_dir.glob("fotek_products_*.xlsx"))
        if not excel_files:
            logger.error("‚ùå Kh√¥ng t√¨m th·∫•y file Excel n√†o!")
            return
        
        import pandas as pd
        latest_excel = max(excel_files, key=lambda f: f.stat().st_mtime)
        df = pd.read_excel(latest_excel)
        total_products = len(df)
        
        # ∆Ø·ªõc t√≠nh th·ªùi gian
        sequential_time, parallel_time = estimate_processing_time(total_products, args.workers)
        
        logger.info(f"üìä T·ªïng s·ªë s·∫£n ph·∫©m: {total_products}")
        logger.info(f"‚è±Ô∏è Th·ªùi gian ∆∞·ªõc t√≠nh:")
        logger.info(f"   - Tu·∫ßn t·ª± (1 worker): {format_time(sequential_time)}")
        logger.info(f"   - Song song ({args.workers} workers): {format_time(parallel_time)}")
        logger.info(f"   - TƒÉng t·ªëc: {sequential_time/parallel_time:.1f}x")
        
        if args.estimate_time:
            logger.info("üìã Ch·ªâ ∆∞·ªõc t√≠nh th·ªùi gian - kh√¥ng th·ª±c hi·ªán x·ª≠ l√Ω")
            return
        
        # X√°c nh·∫≠n t·ª´ ng∆∞·ªùi d√πng
        logger.info(f"üöÄ B·∫Øt ƒë·∫ßu x·ª≠ l√Ω v·ªõi {args.workers} workers...")
        
        start_time = time.time()
        
        # Kh·ªüi t·∫°o scraper v·ªõi s·ªë workers ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh
        scraper = FotekScraper(max_workers=args.workers)
        
        # Ch·∫°y x·ª≠ l√Ω l·∫°i d·ªØ li·ªáu
        scraper.reprocess_existing_data(max_workers=args.workers)
        
        end_time = time.time()
        actual_time = end_time - start_time
        
        logger.info(f"‚úÖ Ho√†n th√†nh x·ª≠ l√Ω l·∫°i d·ªØ li·ªáu!")
        logger.info(f"‚è±Ô∏è Th·ªùi gian th·ª±c t·∫ø: {format_time(actual_time)}")
        logger.info(f"üéØ So v·ªõi ∆∞·ªõc t√≠nh: {abs(actual_time - parallel_time)/parallel_time*100:.1f}% ch√™nh l·ªách")
        
    except KeyboardInterrupt:
        logger.info("‚ö†Ô∏è ƒê√£ d·ª´ng x·ª≠ l√Ω theo y√™u c·∫ßu ng∆∞·ªùi d√πng")
        sys.exit(0)
    except Exception as e:
        logger.error(f"‚ùå L·ªói trong qu√° tr√¨nh x·ª≠ l√Ω l·∫°i d·ªØ li·ªáu: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()